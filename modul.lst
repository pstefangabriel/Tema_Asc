     1                                  bits 32
     2                                  
     3                                  global nr_caractere, numaram_aparitile, afisare
     4                                  
     5                                  extern printf
     6                                  import printf msvcrt.dll
     7                                  
     8                                  segment data use32 class=data:
     9 00000000 4C6974657261202563-         afiseaza db "Litera %c a aparut de %d ori ", 10, 13, 0
     9 00000009 206120617061727574-
     9 00000012 206465202564206F72-
     9 0000001B 69200A0D00         
    10                                  
    11                                  segment code use32 class=code:
    12                                          
    13                                       nr_caractere:   
    14                                          ; determinam numarul de caractere
    15                                          ;input: eax     output: esi
    16                                          
    17 00000000 BE00000000                      mov esi, 0
    18                                          bucla:
    19 00000005 803C3000                            cmp byte[eax + esi], 0
    20 00000009 7405                                je am_ajuns_la_final
    21                                              
    22                                              nu_am_ajuns_la_final:
    23 0000000B 83C601                                  add esi, 1
    24 0000000E EBF5                                    jmp bucla
    25                                          
    26                                          am_ajuns_la_final:
    27                                              
    28 00000010 C3                              ret
    29                                      
    30                                      numaram_aparitile:
    31                                          ; aflam de cate ori apare fiecare litera
    32                                          ;input: stiva  output: -
    33                                          ;input: buffer, len, len_litere, frecventa, litere
    34                                          
    35 00000011 8B4C240C                        mov ecx, [esp + 12] ; len_litere
    36                                              
    37                                          ; prelucram caracterele
    38                                              
    39 00000015 BE00000000                      mov esi, 0; i = 0
    40 0000001A 8B5C2414                        mov ebx, [esp + 20] ; litere
    41 0000001E 8B542410                        mov edx, [esp + 16]; frecventa
    42                                          prelucram:
    43 00000022 8B7C2404                             mov edi, [esp + 4]; punem in edi bufferu ca s pregatim scasb
    44 00000026 51                                   push ecx
    45 00000027 8B4C240C                             mov ecx, [esp + 12]; len acum va fi esp + 12 din cauza acelui push
    46                                                  
    47 0000002B 8A0433                               mov al, [ebx + esi] ; al = litere[i]
    48                                               bucla1: ; bucla1 se va executa de len ori
    49 0000002E AE                                       scasb ; scanam
    50 0000002F 7504                                     jne nu
    51                                                   da:
    52 00000031 8004B201                                    add byte[edx + esi * 4], 1
    53                                                      
    54                                                   nu:
    55                                                      
    56 00000035 E2F7                                     loop bucla1
    57                                                  
    58 00000037 83C601                               add esi, 1; i = i + 1
    59 0000003A 59                                   pop ecx
    60 0000003B E2E5                                 loop prelucram
    61                                               
    62 0000003D C21400                          ret 4 * 5
    63                                          
    64                                      afisare:
    65                                          ; afisare
    66                                          ;input: regisrtrii EAX - litere, EBX - frecventa, ECX - len_litere;   output: -
    67                                          
    68 00000040 BE00000000                      mov esi, 0
    69                                          repeta:
    70 00000045 803CB300                            cmp byte[ebx + esi * 4], 0    ;incearca si dword
    71 00000049 741A                                je nu_afisam
    72                                              
    73 0000004B 51                                  push ecx; salvam ecx
    74 0000004C 50                                  push eax; salvam eax
    75 0000004D 53                                  push ebx; salvam ebx
    76 0000004E FF34B3                              push dword[ebx + esi * 4]
    77 00000051 FF3430                              push dword[eax + esi]
    78 00000054 68[00000000]                        push dword afiseaza
    79 00000059 FF15[00000000]                      call [printf]
    80 0000005F 83C40C                              add esp, 4 * 3
    81 00000062 5B                                  pop ebx
    82 00000063 58                                  pop eax
    83 00000064 59                                  pop ecx; readucem ecx la valoare initiala
    84                                              
    85                                              nu_afisam:
    86 00000065 83C601                                  add esi,1
    87                                              
    88 00000068 E2DB                                loop repeta
    89                                              
    90 0000006A C3                              ret
    91                                   
